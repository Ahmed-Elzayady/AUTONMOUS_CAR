
AUTONOMOUS_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000850  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000850  000008c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000008e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000914  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001efe  00000000  00000000  00000ab0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a6a  00000000  00000000  000029ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fa0  00000000  00000000  00003418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000260  00000000  00000000  000043b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005bf  00000000  00000000  00004618  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f55  00000000  00000000  00004bd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000100  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 d6 02 	call	0x5ac	; 0x5ac <main>
  7a:	0c 94 26 04 	jmp	0x84c	; 0x84c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DCM_Init>:

#include "DIO_interface.h"
#include "DCM_config.h"
void DCM_Init()
{
		DIO_SetPinDirection(DCM_PORT,DCM_PIN0,DIO_SET_PIN_OUTPUT);
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	83 e0       	ldi	r24, 0x03	; 3
  88:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
		DIO_SetPinDirection(DCM_PORT,DCM_PIN1,DIO_SET_PIN_OUTPUT);
  8c:	41 e0       	ldi	r20, 0x01	; 1
  8e:	61 e0       	ldi	r22, 0x01	; 1
  90:	83 e0       	ldi	r24, 0x03	; 3
  92:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
		DIO_SetPinDirection(DCM_PORT,DCM_PIN2,DIO_SET_PIN_OUTPUT);
  96:	41 e0       	ldi	r20, 0x01	; 1
  98:	62 e0       	ldi	r22, 0x02	; 2
  9a:	83 e0       	ldi	r24, 0x03	; 3
  9c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
		DIO_SetPinDirection(DCM_PORT,DCM_PIN3,DIO_SET_PIN_OUTPUT);
  a0:	41 e0       	ldi	r20, 0x01	; 1
  a2:	63 e0       	ldi	r22, 0x03	; 3
  a4:	83 e0       	ldi	r24, 0x03	; 3
  a6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
  aa:	08 95       	ret

000000ac <DCM_MoveForward>:
}
void DCM_MoveForward()
{
	
		DIO_SetPinValue(DCM_PORT,DCM_PIN0,HIGH);
  ac:	41 e0       	ldi	r20, 0x01	; 1
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	83 e0       	ldi	r24, 0x03	; 3
  b2:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN1,LOW);
  b6:	40 e0       	ldi	r20, 0x00	; 0
  b8:	61 e0       	ldi	r22, 0x01	; 1
  ba:	83 e0       	ldi	r24, 0x03	; 3
  bc:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN2,HIGH);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	62 e0       	ldi	r22, 0x02	; 2
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN3,LOW);
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	63 e0       	ldi	r22, 0x03	; 3
  ce:	83 e0       	ldi	r24, 0x03	; 3
  d0:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
  d4:	08 95       	ret

000000d6 <DCM_MoveRight>:
}
void DCM_MoveRight()
{
	
		DIO_SetPinValue(DCM_PORT,DCM_PIN0,HIGH);
  d6:	41 e0       	ldi	r20, 0x01	; 1
  d8:	60 e0       	ldi	r22, 0x00	; 0
  da:	83 e0       	ldi	r24, 0x03	; 3
  dc:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN1,LOW);
  e0:	40 e0       	ldi	r20, 0x00	; 0
  e2:	61 e0       	ldi	r22, 0x01	; 1
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN2,LOW);
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	62 e0       	ldi	r22, 0x02	; 2
  ee:	83 e0       	ldi	r24, 0x03	; 3
  f0:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN3,LOW);
  f4:	40 e0       	ldi	r20, 0x00	; 0
  f6:	63 e0       	ldi	r22, 0x03	; 3
  f8:	83 e0       	ldi	r24, 0x03	; 3
  fa:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
  fe:	08 95       	ret

00000100 <DCM_MoveLeft>:


void DCM_MoveLeft()
{
	
		DIO_SetPinValue(DCM_PORT,DCM_PIN0,LOW);
 100:	40 e0       	ldi	r20, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN1,LOW);
 10a:	40 e0       	ldi	r20, 0x00	; 0
 10c:	61 e0       	ldi	r22, 0x01	; 1
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN2,LOW);
 114:	40 e0       	ldi	r20, 0x00	; 0
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN3,HIGH);
 11e:	41 e0       	ldi	r20, 0x01	; 1
 120:	63 e0       	ldi	r22, 0x03	; 3
 122:	83 e0       	ldi	r24, 0x03	; 3
 124:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 128:	08 95       	ret

0000012a <DCM_MoveBack>:


void DCM_MoveBack()
{
	
		DIO_SetPinValue(DCM_PORT,DCM_PIN0,LOW);
 12a:	40 e0       	ldi	r20, 0x00	; 0
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	83 e0       	ldi	r24, 0x03	; 3
 130:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN1,HIGH);
 134:	41 e0       	ldi	r20, 0x01	; 1
 136:	61 e0       	ldi	r22, 0x01	; 1
 138:	83 e0       	ldi	r24, 0x03	; 3
 13a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN2,LOW);
 13e:	40 e0       	ldi	r20, 0x00	; 0
 140:	62 e0       	ldi	r22, 0x02	; 2
 142:	83 e0       	ldi	r24, 0x03	; 3
 144:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN3,HIGH);
 148:	41 e0       	ldi	r20, 0x01	; 1
 14a:	63 e0       	ldi	r22, 0x03	; 3
 14c:	83 e0       	ldi	r24, 0x03	; 3
 14e:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 152:	08 95       	ret

00000154 <DCM_STOP>:
}

void DCM_STOP()
{
		DIO_SetPinValue(DCM_PORT,DCM_PIN0,LOW);
 154:	40 e0       	ldi	r20, 0x00	; 0
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN1,LOW);
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN2,LOW);
 168:	40 e0       	ldi	r20, 0x00	; 0
 16a:	62 e0       	ldi	r22, 0x02	; 2
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
		DIO_SetPinValue(DCM_PORT,DCM_PIN3,LOW);
 172:	40 e0       	ldi	r20, 0x00	; 0
 174:	63 e0       	ldi	r22, 0x03	; 3
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 17c:	08 95       	ret

0000017e <DIO_SetPinDirection>:

/*********************************************SETPIN*****************************/

void DIO_SetPinDirection(u8 GroupId, u8 PinId, u8 PinMode)
{
	if((GroupId<=3)&&(PinId<=7)&&((PinMode==DIO_SET_PIN_OUTPUT)||(PinMode==DIO_SET_PIN_INPUT)))
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	08 f0       	brcs	.+2      	; 0x184 <DIO_SetPinDirection+0x6>
 182:	72 c0       	rjmp	.+228    	; 0x268 <DIO_SetPinDirection+0xea>
 184:	68 30       	cpi	r22, 0x08	; 8
 186:	08 f0       	brcs	.+2      	; 0x18a <DIO_SetPinDirection+0xc>
 188:	6f c0       	rjmp	.+222    	; 0x268 <DIO_SetPinDirection+0xea>
 18a:	42 30       	cpi	r20, 0x02	; 2
 18c:	08 f0       	brcs	.+2      	; 0x190 <DIO_SetPinDirection+0x12>
 18e:	6c c0       	rjmp	.+216    	; 0x268 <DIO_SetPinDirection+0xea>
	{
		switch (GroupId)
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	01 f1       	breq	.+64     	; 0x1d4 <DIO_SetPinDirection+0x56>
 194:	30 f0       	brcs	.+12     	; 0x1a2 <DIO_SetPinDirection+0x24>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	b1 f1       	breq	.+108    	; 0x206 <DIO_SetPinDirection+0x88>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_SetPinDirection+0x22>
 19e:	4c c0       	rjmp	.+152    	; 0x238 <DIO_SetPinDirection+0xba>
 1a0:	08 95       	ret
			{
			case DIO_GROUPA:
				if (PinMode == DIO_SET_PIN_OUTPUT)
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	59 f4       	brne	.+22     	; 0x1bc <DIO_SetPinDirection+0x3e>
				{
					SET_BIT(DDRA, PinId);
 1a6:	2a b3       	in	r18, 0x1a	; 26
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPinDirection+0x34>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPinDirection+0x30>
 1b6:	82 2b       	or	r24, r18
 1b8:	8a bb       	out	0x1a, r24	; 26
 1ba:	08 95       	ret
				}
				else
				{
					CLEAR_BIT(DDRA, PinId);
 1bc:	2a b3       	in	r18, 0x1a	; 26
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_SetPinDirection+0x4a>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_SetPinDirection+0x46>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	8a bb       	out	0x1a, r24	; 26
 1d2:	08 95       	ret
				}
				break;
			case DIO_GROUPB:
				if (PinMode == DIO_SET_PIN_OUTPUT)
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_SetPinDirection+0x70>
				{
					SET_BIT(DDRB, PinId);
 1d8:	27 b3       	in	r18, 0x17	; 23
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_SetPinDirection+0x66>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_SetPinDirection+0x62>
 1e8:	82 2b       	or	r24, r18
 1ea:	87 bb       	out	0x17, r24	; 23
 1ec:	08 95       	ret
				}
				else
				{
					CLEAR_BIT(DDRB, PinId);
 1ee:	27 b3       	in	r18, 0x17	; 23
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPinDirection+0x7c>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPinDirection+0x78>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	87 bb       	out	0x17, r24	; 23
 204:	08 95       	ret
				}
				break;
			case DIO_GROUPC:
				if (PinMode == DIO_SET_PIN_OUTPUT)
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_SetPinDirection+0xa2>
				{
					SET_BIT(DDRC, PinId);
 20a:	24 b3       	in	r18, 0x14	; 20
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_SetPinDirection+0x98>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_SetPinDirection+0x94>
 21a:	82 2b       	or	r24, r18
 21c:	84 bb       	out	0x14, r24	; 20
 21e:	08 95       	ret
				}
				else
				{
					CLEAR_BIT(DDRC, PinId);
 220:	24 b3       	in	r18, 0x14	; 20
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_SetPinDirection+0xae>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_SetPinDirection+0xaa>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	84 bb       	out	0x14, r24	; 20
 236:	08 95       	ret
				}
				break;
			case DIO_GROUPD:
				if (PinMode == DIO_SET_PIN_OUTPUT)
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	59 f4       	brne	.+22     	; 0x252 <DIO_SetPinDirection+0xd4>
				{
					SET_BIT(DDRD, PinId);
 23c:	21 b3       	in	r18, 0x11	; 17
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_SetPinDirection+0xca>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_SetPinDirection+0xc6>
 24c:	82 2b       	or	r24, r18
 24e:	81 bb       	out	0x11, r24	; 17
 250:	08 95       	ret
				}
				else
				{
					CLEAR_BIT(DDRD, PinId);
 252:	21 b3       	in	r18, 0x11	; 17
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_SetPinDirection+0xe0>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_SetPinDirection+0xdc>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	81 bb       	out	0x11, r24	; 17
 268:	08 95       	ret

0000026a <DIO_SetPinValue>:
/**************************************************PINVALUE********************************/

void DIO_SetPinValue(u8 GroupId, u8 PinId, u8 PinValue)
{

	if((GroupId<=3)&&(PinId<=7)&&((PinValue==HIGH)||(PinValue==LOW)))
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	08 f0       	brcs	.+2      	; 0x270 <DIO_SetPinValue+0x6>
 26e:	72 c0       	rjmp	.+228    	; 0x354 <DIO_SetPinValue+0xea>
 270:	68 30       	cpi	r22, 0x08	; 8
 272:	08 f0       	brcs	.+2      	; 0x276 <DIO_SetPinValue+0xc>
 274:	6f c0       	rjmp	.+222    	; 0x354 <DIO_SetPinValue+0xea>
 276:	42 30       	cpi	r20, 0x02	; 2
 278:	08 f0       	brcs	.+2      	; 0x27c <DIO_SetPinValue+0x12>
 27a:	6c c0       	rjmp	.+216    	; 0x354 <DIO_SetPinValue+0xea>
	{
		switch (GroupId)
 27c:	81 30       	cpi	r24, 0x01	; 1
 27e:	01 f1       	breq	.+64     	; 0x2c0 <DIO_SetPinValue+0x56>
 280:	30 f0       	brcs	.+12     	; 0x28e <DIO_SetPinValue+0x24>
 282:	82 30       	cpi	r24, 0x02	; 2
 284:	b1 f1       	breq	.+108    	; 0x2f2 <DIO_SetPinValue+0x88>
 286:	83 30       	cpi	r24, 0x03	; 3
 288:	09 f4       	brne	.+2      	; 0x28c <DIO_SetPinValue+0x22>
 28a:	4c c0       	rjmp	.+152    	; 0x324 <DIO_SetPinValue+0xba>
 28c:	08 95       	ret
			{
			case DIO_GROUPA:
				if (PinValue == HIGH)
 28e:	41 30       	cpi	r20, 0x01	; 1
 290:	59 f4       	brne	.+22     	; 0x2a8 <DIO_SetPinValue+0x3e>
				{
					SET_BIT(PORTA, PinId);
 292:	2b b3       	in	r18, 0x1b	; 27
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	02 c0       	rjmp	.+4      	; 0x29e <DIO_SetPinValue+0x34>
 29a:	88 0f       	add	r24, r24
 29c:	99 1f       	adc	r25, r25
 29e:	6a 95       	dec	r22
 2a0:	e2 f7       	brpl	.-8      	; 0x29a <DIO_SetPinValue+0x30>
 2a2:	82 2b       	or	r24, r18
 2a4:	8b bb       	out	0x1b, r24	; 27
 2a6:	08 95       	ret
				}

				else
				{

					CLEAR_BIT(PORTA, PinId);
 2a8:	2b b3       	in	r18, 0x1b	; 27
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_SetPinValue+0x4a>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	6a 95       	dec	r22
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_SetPinValue+0x46>
 2b8:	80 95       	com	r24
 2ba:	82 23       	and	r24, r18
 2bc:	8b bb       	out	0x1b, r24	; 27
 2be:	08 95       	ret
				}
				break;
			case DIO_GROUPB:
				if (PinValue == HIGH)
 2c0:	41 30       	cpi	r20, 0x01	; 1
 2c2:	59 f4       	brne	.+22     	; 0x2da <DIO_SetPinValue+0x70>
				{
					SET_BIT(PORTB, PinId);
 2c4:	28 b3       	in	r18, 0x18	; 24
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_SetPinValue+0x66>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_SetPinValue+0x62>
 2d4:	82 2b       	or	r24, r18
 2d6:	88 bb       	out	0x18, r24	; 24
 2d8:	08 95       	ret
				}

				else
				{

					CLEAR_BIT(PORTB, PinId);
 2da:	28 b3       	in	r18, 0x18	; 24
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_SetPinValue+0x7c>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	6a 95       	dec	r22
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_SetPinValue+0x78>
 2ea:	80 95       	com	r24
 2ec:	82 23       	and	r24, r18
 2ee:	88 bb       	out	0x18, r24	; 24
 2f0:	08 95       	ret
				}
				break;
			case DIO_GROUPC:
				if (PinValue == HIGH)
 2f2:	41 30       	cpi	r20, 0x01	; 1
 2f4:	59 f4       	brne	.+22     	; 0x30c <DIO_SetPinValue+0xa2>
				{
					SET_BIT(PORTC, PinId);
 2f6:	25 b3       	in	r18, 0x15	; 21
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <DIO_SetPinValue+0x98>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	6a 95       	dec	r22
 304:	e2 f7       	brpl	.-8      	; 0x2fe <DIO_SetPinValue+0x94>
 306:	82 2b       	or	r24, r18
 308:	85 bb       	out	0x15, r24	; 21
 30a:	08 95       	ret
				}

				else
				{

					CLEAR_BIT(PORTC, PinId);
 30c:	25 b3       	in	r18, 0x15	; 21
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	02 c0       	rjmp	.+4      	; 0x318 <DIO_SetPinValue+0xae>
 314:	88 0f       	add	r24, r24
 316:	99 1f       	adc	r25, r25
 318:	6a 95       	dec	r22
 31a:	e2 f7       	brpl	.-8      	; 0x314 <DIO_SetPinValue+0xaa>
 31c:	80 95       	com	r24
 31e:	82 23       	and	r24, r18
 320:	85 bb       	out	0x15, r24	; 21
 322:	08 95       	ret
				}
				break;
			case DIO_GROUPD:
				if (PinValue == HIGH)
 324:	41 30       	cpi	r20, 0x01	; 1
 326:	59 f4       	brne	.+22     	; 0x33e <DIO_SetPinValue+0xd4>
				{
					SET_BIT(PORTD, PinId);
 328:	22 b3       	in	r18, 0x12	; 18
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	90 e0       	ldi	r25, 0x00	; 0
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_SetPinValue+0xca>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	6a 95       	dec	r22
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_SetPinValue+0xc6>
 338:	82 2b       	or	r24, r18
 33a:	82 bb       	out	0x12, r24	; 18
 33c:	08 95       	ret
				}

				else
				{

					CLEAR_BIT(PORTD, PinId);
 33e:	22 b3       	in	r18, 0x12	; 18
 340:	81 e0       	ldi	r24, 0x01	; 1
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_SetPinValue+0xe0>
 346:	88 0f       	add	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	6a 95       	dec	r22
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_SetPinValue+0xdc>
 34e:	80 95       	com	r24
 350:	82 23       	and	r24, r18
 352:	82 bb       	out	0x12, r24	; 18
 354:	08 95       	ret

00000356 <LCD_WriteHalfPort>:
  {
   LCD_SendChar((Local_reversed%10)+'0');
   Local_reversed /= 10;
  }while (Local_reversed != 1);
 } 
}
 356:	cf 93       	push	r28
 358:	c8 2f       	mov	r28, r24
 35a:	80 ff       	sbrs	r24, 0
 35c:	06 c0       	rjmp	.+12     	; 0x36a <LCD_WriteHalfPort+0x14>
 35e:	41 e0       	ldi	r20, 0x01	; 1
 360:	64 e0       	ldi	r22, 0x04	; 4
 362:	80 e0       	ldi	r24, 0x00	; 0
 364:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 368:	05 c0       	rjmp	.+10     	; 0x374 <LCD_WriteHalfPort+0x1e>
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	64 e0       	ldi	r22, 0x04	; 4
 36e:	80 e0       	ldi	r24, 0x00	; 0
 370:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 374:	c1 ff       	sbrs	r28, 1
 376:	06 c0       	rjmp	.+12     	; 0x384 <LCD_WriteHalfPort+0x2e>
 378:	41 e0       	ldi	r20, 0x01	; 1
 37a:	65 e0       	ldi	r22, 0x05	; 5
 37c:	80 e0       	ldi	r24, 0x00	; 0
 37e:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 382:	05 c0       	rjmp	.+10     	; 0x38e <LCD_WriteHalfPort+0x38>
 384:	40 e0       	ldi	r20, 0x00	; 0
 386:	65 e0       	ldi	r22, 0x05	; 5
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 38e:	c2 ff       	sbrs	r28, 2
 390:	06 c0       	rjmp	.+12     	; 0x39e <LCD_WriteHalfPort+0x48>
 392:	41 e0       	ldi	r20, 0x01	; 1
 394:	66 e0       	ldi	r22, 0x06	; 6
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 39c:	05 c0       	rjmp	.+10     	; 0x3a8 <LCD_WriteHalfPort+0x52>
 39e:	40 e0       	ldi	r20, 0x00	; 0
 3a0:	66 e0       	ldi	r22, 0x06	; 6
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 3a8:	c3 ff       	sbrs	r28, 3
 3aa:	06 c0       	rjmp	.+12     	; 0x3b8 <LCD_WriteHalfPort+0x62>
 3ac:	41 e0       	ldi	r20, 0x01	; 1
 3ae:	67 e0       	ldi	r22, 0x07	; 7
 3b0:	80 e0       	ldi	r24, 0x00	; 0
 3b2:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 3b6:	05 c0       	rjmp	.+10     	; 0x3c2 <LCD_WriteHalfPort+0x6c>
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	67 e0       	ldi	r22, 0x07	; 7
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <LCD_SendCmnd>:
 3c6:	cf 93       	push	r28
 3c8:	c8 2f       	mov	r28, r24
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	62 e0       	ldi	r22, 0x02	; 2
 3ce:	81 e0       	ldi	r24, 0x01	; 1
 3d0:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 3d4:	40 e0       	ldi	r20, 0x00	; 0
 3d6:	63 e0       	ldi	r22, 0x03	; 3
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 3de:	8c 2f       	mov	r24, r28
 3e0:	82 95       	swap	r24
 3e2:	8f 70       	andi	r24, 0x0F	; 15
 3e4:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_WriteHalfPort>
 3e8:	41 e0       	ldi	r20, 0x01	; 1
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 3f2:	8f e9       	ldi	r24, 0x9F	; 159
 3f4:	9f e0       	ldi	r25, 0x0F	; 15
 3f6:	01 97       	sbiw	r24, 0x01	; 1
 3f8:	f1 f7       	brne	.-4      	; 0x3f6 <LCD_SendCmnd+0x30>
 3fa:	00 c0       	rjmp	.+0      	; 0x3fc <LCD_SendCmnd+0x36>
 3fc:	00 00       	nop
 3fe:	40 e0       	ldi	r20, 0x00	; 0
 400:	61 e0       	ldi	r22, 0x01	; 1
 402:	81 e0       	ldi	r24, 0x01	; 1
 404:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 408:	8c 2f       	mov	r24, r28
 40a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_WriteHalfPort>
 40e:	41 e0       	ldi	r20, 0x01	; 1
 410:	61 e0       	ldi	r22, 0x01	; 1
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 418:	8f e9       	ldi	r24, 0x9F	; 159
 41a:	9f e0       	ldi	r25, 0x0F	; 15
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 420:	00 c0       	rjmp	.+0      	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 422:	00 00       	nop
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	61 e0       	ldi	r22, 0x01	; 1
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 42e:	cf 91       	pop	r28
 430:	08 95       	ret

00000432 <LCD_Init>:
 432:	41 e0       	ldi	r20, 0x01	; 1
 434:	62 e0       	ldi	r22, 0x02	; 2
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
 43c:	41 e0       	ldi	r20, 0x01	; 1
 43e:	63 e0       	ldi	r22, 0x03	; 3
 440:	81 e0       	ldi	r24, 0x01	; 1
 442:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	61 e0       	ldi	r22, 0x01	; 1
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	64 e0       	ldi	r22, 0x04	; 4
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
 45a:	41 e0       	ldi	r20, 0x01	; 1
 45c:	65 e0       	ldi	r22, 0x05	; 5
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
 464:	41 e0       	ldi	r20, 0x01	; 1
 466:	66 e0       	ldi	r22, 0x06	; 6
 468:	80 e0       	ldi	r24, 0x00	; 0
 46a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
 46e:	41 e0       	ldi	r20, 0x01	; 1
 470:	67 e0       	ldi	r22, 0x07	; 7
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
 478:	2f e7       	ldi	r18, 0x7F	; 127
 47a:	85 eb       	ldi	r24, 0xB5	; 181
 47c:	91 e0       	ldi	r25, 0x01	; 1
 47e:	21 50       	subi	r18, 0x01	; 1
 480:	80 40       	sbci	r24, 0x00	; 0
 482:	90 40       	sbci	r25, 0x00	; 0
 484:	e1 f7       	brne	.-8      	; 0x47e <LCD_Init+0x4c>
 486:	00 c0       	rjmp	.+0      	; 0x488 <LCD_Init+0x56>
 488:	00 00       	nop
 48a:	40 e0       	ldi	r20, 0x00	; 0
 48c:	62 e0       	ldi	r22, 0x02	; 2
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 494:	40 e0       	ldi	r20, 0x00	; 0
 496:	63 e0       	ldi	r22, 0x03	; 3
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 49e:	82 e0       	ldi	r24, 0x02	; 2
 4a0:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_WriteHalfPort>
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 4ae:	8f e9       	ldi	r24, 0x9F	; 159
 4b0:	9f e0       	ldi	r25, 0x0F	; 15
 4b2:	01 97       	sbiw	r24, 0x01	; 1
 4b4:	f1 f7       	brne	.-4      	; 0x4b2 <LCD_Init+0x80>
 4b6:	00 c0       	rjmp	.+0      	; 0x4b8 <LCD_Init+0x86>
 4b8:	00 00       	nop
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 4c4:	88 e2       	ldi	r24, 0x28	; 40
 4c6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SendCmnd>
 4ca:	90 ef       	ldi	r25, 0xF0	; 240
 4cc:	9a 95       	dec	r25
 4ce:	f1 f7       	brne	.-4      	; 0x4cc <LCD_Init+0x9a>
 4d0:	8c e0       	ldi	r24, 0x0C	; 12
 4d2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SendCmnd>
 4d6:	20 ef       	ldi	r18, 0xF0	; 240
 4d8:	2a 95       	dec	r18
 4da:	f1 f7       	brne	.-4      	; 0x4d8 <LCD_Init+0xa6>
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SendCmnd>
 4e2:	8f e3       	ldi	r24, 0x3F	; 63
 4e4:	9f e1       	ldi	r25, 0x1F	; 31
 4e6:	01 97       	sbiw	r24, 0x01	; 1
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <LCD_Init+0xb4>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <LCD_Init+0xba>
 4ec:	00 00       	nop
 4ee:	86 e0       	ldi	r24, 0x06	; 6
 4f0:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SendCmnd>
 4f4:	08 95       	ret

000004f6 <LCD_SendChar>:
 4f6:	cf 93       	push	r28
 4f8:	c8 2f       	mov	r28, r24
 4fa:	41 e0       	ldi	r20, 0x01	; 1
 4fc:	62 e0       	ldi	r22, 0x02	; 2
 4fe:	81 e0       	ldi	r24, 0x01	; 1
 500:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 504:	40 e0       	ldi	r20, 0x00	; 0
 506:	63 e0       	ldi	r22, 0x03	; 3
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 50e:	8c 2f       	mov	r24, r28
 510:	82 95       	swap	r24
 512:	8f 70       	andi	r24, 0x0F	; 15
 514:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_WriteHalfPort>
 518:	41 e0       	ldi	r20, 0x01	; 1
 51a:	61 e0       	ldi	r22, 0x01	; 1
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 522:	8f e9       	ldi	r24, 0x9F	; 159
 524:	9f e0       	ldi	r25, 0x0F	; 15
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	f1 f7       	brne	.-4      	; 0x526 <LCD_SendChar+0x30>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <LCD_SendChar+0x36>
 52c:	00 00       	nop
 52e:	40 e0       	ldi	r20, 0x00	; 0
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 538:	8c 2f       	mov	r24, r28
 53a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_WriteHalfPort>
 53e:	41 e0       	ldi	r20, 0x01	; 1
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 548:	8f e9       	ldi	r24, 0x9F	; 159
 54a:	9f e0       	ldi	r25, 0x0F	; 15
 54c:	01 97       	sbiw	r24, 0x01	; 1
 54e:	f1 f7       	brne	.-4      	; 0x54c <LCD_SendChar+0x56>
 550:	00 c0       	rjmp	.+0      	; 0x552 <LCD_SendChar+0x5c>
 552:	00 00       	nop
 554:	40 e0       	ldi	r20, 0x00	; 0
 556:	61 e0       	ldi	r22, 0x01	; 1
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 55e:	cf 91       	pop	r28
 560:	08 95       	ret

00000562 <LCD_SendString>:
 562:	0f 93       	push	r16
 564:	1f 93       	push	r17
 566:	cf 93       	push	r28
 568:	8c 01       	movw	r16, r24
 56a:	c0 e0       	ldi	r28, 0x00	; 0
 56c:	03 c0       	rjmp	.+6      	; 0x574 <LCD_SendString+0x12>
 56e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <LCD_SendChar>
 572:	cf 5f       	subi	r28, 0xFF	; 255
 574:	f8 01       	movw	r30, r16
 576:	ec 0f       	add	r30, r28
 578:	f1 1d       	adc	r31, r1
 57a:	80 81       	ld	r24, Z
 57c:	81 11       	cpse	r24, r1
 57e:	f7 cf       	rjmp	.-18     	; 0x56e <LCD_SendString+0xc>
 580:	cf 91       	pop	r28
 582:	1f 91       	pop	r17
 584:	0f 91       	pop	r16
 586:	08 95       	ret

00000588 <LCD_SetCursor>:
void LCD_SetCursor(u8 LineNumber, u8 Position)
{
 if(LineNumber == LCD_LINE_ONE)
 588:	81 30       	cpi	r24, 0x01	; 1
 58a:	39 f4       	brne	.+14     	; 0x59a <LCD_SetCursor+0x12>
 {
  if(Position <= 15)
 58c:	60 31       	cpi	r22, 0x10	; 16
 58e:	68 f4       	brcc	.+26     	; 0x5aa <LCD_SetCursor+0x22>
  {
   LCD_SendCmnd(0x80 + Position);
 590:	80 e8       	ldi	r24, 0x80	; 128
 592:	86 0f       	add	r24, r22
 594:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SendCmnd>
 598:	08 95       	ret
  }
 }

 else if (LineNumber == LCD_LINE_TWO)
 59a:	82 30       	cpi	r24, 0x02	; 2
 59c:	31 f4       	brne	.+12     	; 0x5aa <LCD_SetCursor+0x22>
 {
  if(Position <= 15)
 59e:	60 31       	cpi	r22, 0x10	; 16
 5a0:	20 f4       	brcc	.+8      	; 0x5aa <LCD_SetCursor+0x22>
  {
   LCD_SendCmnd(0xc0 + Position);
 5a2:	80 ec       	ldi	r24, 0xC0	; 192
 5a4:	86 0f       	add	r24, r22
 5a6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <LCD_SendCmnd>
 5aa:	08 95       	ret

000005ac <main>:
#include "ULTRASONIC_interface.h"

int main(void)

{
	DIO_SetPinDirection(DIO_GROUPD, DIO_PIN7, DIO_SET_PIN_OUTPUT);
 5ac:	41 e0       	ldi	r20, 0x01	; 1
 5ae:	67 e0       	ldi	r22, 0x07	; 7
 5b0:	83 e0       	ldi	r24, 0x03	; 3
 5b2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	DIO_SetPinDirection(DIO_GROUPA, DIO_PIN2, DIO_SET_PIN_OUTPUT);
 5b6:	41 e0       	ldi	r20, 0x01	; 1
 5b8:	62 e0       	ldi	r22, 0x02	; 2
 5ba:	80 e0       	ldi	r24, 0x00	; 0
 5bc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	LCD_Init();
 5c0:	0e 94 19 02 	call	0x432	; 0x432 <LCD_Init>
	SERVO_Init();
 5c4:	0e 94 83 03 	call	0x706	; 0x706 <SERVO_Init>
	DCM_Init();
 5c8:	0e 94 41 00 	call	0x82	; 0x82 <DCM_Init>
	u16 distance = 0, RightDistance = 0, LeftDistance = 0;
	SERVO_90_Degree();
 5cc:	0e 94 9f 03 	call	0x73e	; 0x73e <SERVO_90_Degree>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d0:	8f e4       	ldi	r24, 0x4F	; 79
 5d2:	93 ec       	ldi	r25, 0xC3	; 195
 5d4:	01 97       	sbiw	r24, 0x01	; 1
 5d6:	f1 f7       	brne	.-4      	; 0x5d4 <main+0x28>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0x2e>
 5da:	00 00       	nop
	_delay_ms(200);
	LCD_SetCursor(1, 0);
 5dc:	60 e0       	ldi	r22, 0x00	; 0
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	0e 94 c4 02 	call	0x588	; 0x588 <LCD_SetCursor>
	LCD_SendString("Dir:");
 5e4:	80 e6       	ldi	r24, 0x60	; 96
 5e6:	90 e0       	ldi	r25, 0x00	; 0
 5e8:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_SendString>
	while (1)
	{
		distance = ULTRASONIC_CalcDistance();
 5ec:	0e 94 c1 03 	call	0x782	; 0x782 <ULTRASONIC_CalcDistance>
		if (distance > 20)
 5f0:	45 97       	sbiw	r24, 0x15	; 21
 5f2:	88 f0       	brcs	.+34     	; 0x616 <main+0x6a>
		{
			DCM_MoveForward();
 5f4:	0e 94 56 00 	call	0xac	; 0xac <DCM_MoveForward>
 5f8:	e7 ea       	ldi	r30, 0xA7	; 167
 5fa:	f1 e6       	ldi	r31, 0x61	; 97
 5fc:	31 97       	sbiw	r30, 0x01	; 1
 5fe:	f1 f7       	brne	.-4      	; 0x5fc <main+0x50>
 600:	00 c0       	rjmp	.+0      	; 0x602 <main+0x56>
 602:	00 00       	nop
			_delay_ms(100);
			LCD_SetCursor(1, 5);
 604:	65 e0       	ldi	r22, 0x05	; 5
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	0e 94 c4 02 	call	0x588	; 0x588 <LCD_SetCursor>
			LCD_SendString("FORW");
 60c:	85 e6       	ldi	r24, 0x65	; 101
 60e:	90 e0       	ldi	r25, 0x00	; 0
 610:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_SendString>
 614:	eb cf       	rjmp	.-42     	; 0x5ec <main+0x40>
		}

		else
		{

			DCM_STOP();
 616:	0e 94 aa 00 	call	0x154	; 0x154 <DCM_STOP>
 61a:	87 ea       	ldi	r24, 0xA7	; 167
 61c:	91 e6       	ldi	r25, 0x61	; 97
 61e:	01 97       	sbiw	r24, 0x01	; 1
 620:	f1 f7       	brne	.-4      	; 0x61e <main+0x72>
 622:	00 c0       	rjmp	.+0      	; 0x624 <main+0x78>
 624:	00 00       	nop
			_delay_ms(100);
			LCD_SetCursor(1, 5);
 626:	65 e0       	ldi	r22, 0x05	; 5
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	0e 94 c4 02 	call	0x588	; 0x588 <LCD_SetCursor>
			LCD_SendString("STOP");
 62e:	8a e6       	ldi	r24, 0x6A	; 106
 630:	90 e0       	ldi	r25, 0x00	; 0
 632:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_SendString>
			SERVO_0_Degree();
 636:	0e 94 8e 03 	call	0x71c	; 0x71c <SERVO_0_Degree>
 63a:	ef e4       	ldi	r30, 0x4F	; 79
 63c:	f3 ec       	ldi	r31, 0xC3	; 195
 63e:	31 97       	sbiw	r30, 0x01	; 1
 640:	f1 f7       	brne	.-4      	; 0x63e <main+0x92>
 642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x98>
 644:	00 00       	nop
			_delay_ms(200);
			RightDistance = ULTRASONIC_CalcDistance();
 646:	0e 94 c1 03 	call	0x782	; 0x782 <ULTRASONIC_CalcDistance>
 64a:	ec 01       	movw	r28, r24
 64c:	87 ea       	ldi	r24, 0xA7	; 167
 64e:	91 e6       	ldi	r25, 0x61	; 97
 650:	01 97       	sbiw	r24, 0x01	; 1
 652:	f1 f7       	brne	.-4      	; 0x650 <main+0xa4>
 654:	00 c0       	rjmp	.+0      	; 0x656 <main+0xaa>
 656:	00 00       	nop
			_delay_ms(100);
			SERVO_180_Degree();
 658:	0e 94 b0 03 	call	0x760	; 0x760 <SERVO_180_Degree>
 65c:	ef e4       	ldi	r30, 0x4F	; 79
 65e:	f3 ec       	ldi	r31, 0xC3	; 195
 660:	31 97       	sbiw	r30, 0x01	; 1
 662:	f1 f7       	brne	.-4      	; 0x660 <main+0xb4>
 664:	00 c0       	rjmp	.+0      	; 0x666 <main+0xba>
 666:	00 00       	nop
			_delay_ms(200);
			LeftDistance = ULTRASONIC_CalcDistance();
 668:	0e 94 c1 03 	call	0x782	; 0x782 <ULTRASONIC_CalcDistance>
 66c:	e7 ea       	ldi	r30, 0xA7	; 167
 66e:	f1 e6       	ldi	r31, 0x61	; 97
 670:	31 97       	sbiw	r30, 0x01	; 1
 672:	f1 f7       	brne	.-4      	; 0x670 <main+0xc4>
 674:	00 c0       	rjmp	.+0      	; 0x676 <main+0xca>
 676:	00 00       	nop
			_delay_ms(100);
			if (RightDistance > LeftDistance)
 678:	8c 17       	cp	r24, r28
 67a:	9d 07       	cpc	r25, r29
 67c:	38 f5       	brcc	.+78     	; 0x6cc <main+0x120>
			{
				DCM_MoveBack();
 67e:	0e 94 95 00 	call	0x12a	; 0x12a <DCM_MoveBack>
 682:	87 ea       	ldi	r24, 0xA7	; 167
 684:	91 e6       	ldi	r25, 0x61	; 97
 686:	01 97       	sbiw	r24, 0x01	; 1
 688:	f1 f7       	brne	.-4      	; 0x686 <main+0xda>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <main+0xe0>
 68c:	00 00       	nop
				_delay_ms(100);
				LCD_SetCursor(1,5);
 68e:	65 e0       	ldi	r22, 0x05	; 5
 690:	81 e0       	ldi	r24, 0x01	; 1
 692:	0e 94 c4 02 	call	0x588	; 0x588 <LCD_SetCursor>
				LCD_SendString("BACK");
 696:	8f e6       	ldi	r24, 0x6F	; 111
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_SendString>
 69e:	e7 ea       	ldi	r30, 0xA7	; 167
 6a0:	f1 e6       	ldi	r31, 0x61	; 97
 6a2:	31 97       	sbiw	r30, 0x01	; 1
 6a4:	f1 f7       	brne	.-4      	; 0x6a2 <main+0xf6>
 6a6:	00 c0       	rjmp	.+0      	; 0x6a8 <main+0xfc>
 6a8:	00 00       	nop
				_delay_ms(100);
				DCM_MoveRight();
 6aa:	0e 94 6b 00 	call	0xd6	; 0xd6 <DCM_MoveRight>
 6ae:	87 ea       	ldi	r24, 0xA7	; 167
 6b0:	91 e6       	ldi	r25, 0x61	; 97
 6b2:	01 97       	sbiw	r24, 0x01	; 1
 6b4:	f1 f7       	brne	.-4      	; 0x6b2 <main+0x106>
 6b6:	00 c0       	rjmp	.+0      	; 0x6b8 <main+0x10c>
 6b8:	00 00       	nop
				_delay_ms(100);
				LCD_SetCursor(1, 5);
 6ba:	65 e0       	ldi	r22, 0x05	; 5
 6bc:	81 e0       	ldi	r24, 0x01	; 1
 6be:	0e 94 c4 02 	call	0x588	; 0x588 <LCD_SetCursor>
				LCD_SendString("Righ");
 6c2:	84 e7       	ldi	r24, 0x74	; 116
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_SendString>
 6ca:	90 cf       	rjmp	.-224    	; 0x5ec <main+0x40>
			}
			else if (LeftDistance > RightDistance)
 6cc:	c8 17       	cp	r28, r24
 6ce:	d9 07       	cpc	r29, r25
 6d0:	08 f0       	brcs	.+2      	; 0x6d4 <main+0x128>
 6d2:	8c cf       	rjmp	.-232    	; 0x5ec <main+0x40>
			{
				DCM_MoveBack();
 6d4:	0e 94 95 00 	call	0x12a	; 0x12a <DCM_MoveBack>
 6d8:	e7 ea       	ldi	r30, 0xA7	; 167
 6da:	f1 e6       	ldi	r31, 0x61	; 97
 6dc:	31 97       	sbiw	r30, 0x01	; 1
 6de:	f1 f7       	brne	.-4      	; 0x6dc <main+0x130>
 6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <main+0x136>
 6e2:	00 00       	nop
				_delay_ms(100);
				DCM_MoveLeft();
 6e4:	0e 94 80 00 	call	0x100	; 0x100 <DCM_MoveLeft>
 6e8:	87 ea       	ldi	r24, 0xA7	; 167
 6ea:	91 e6       	ldi	r25, 0x61	; 97
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <main+0x140>
 6f0:	00 c0       	rjmp	.+0      	; 0x6f2 <main+0x146>
 6f2:	00 00       	nop
				_delay_ms(100);
				LCD_SetCursor(1, 5);
 6f4:	65 e0       	ldi	r22, 0x05	; 5
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	0e 94 c4 02 	call	0x588	; 0x588 <LCD_SetCursor>
				LCD_SendString("Left");
 6fc:	89 e7       	ldi	r24, 0x79	; 121
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_SendString>
 704:	73 cf       	rjmp	.-282    	; 0x5ec <main+0x40>

00000706 <SERVO_Init>:
#include "DIO_interface.h"
#include "SERVO_interface.h"
#include <util/delay.h>
void SERVO_Init(void)
{
	DIO_SetPinDirection(DIO_GROUPC,DIO_PIN0,DIO_SET_PIN_OUTPUT);
 706:	41 e0       	ldi	r20, 0x01	; 1
 708:	60 e0       	ldi	r22, 0x00	; 0
 70a:	82 e0       	ldi	r24, 0x02	; 2
 70c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_SetPinDirection>
	DIO_SetPinValue(DIO_GROUPC,DIO_PIN0,LOW);
 710:	40 e0       	ldi	r20, 0x00	; 0
 712:	60 e0       	ldi	r22, 0x00	; 0
 714:	82 e0       	ldi	r24, 0x02	; 2
 716:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 71a:	08 95       	ret

0000071c <SERVO_0_Degree>:
}
void SERVO_0_Degree(void)
{
	
		DIO_SetPinValue(DIO_GROUPC,DIO_PIN0,HIGH);
 71c:	41 e0       	ldi	r20, 0x01	; 1
 71e:	60 e0       	ldi	r22, 0x00	; 0
 720:	82 e0       	ldi	r24, 0x02	; 2
 722:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 726:	8f ec       	ldi	r24, 0xCF	; 207
 728:	97 e0       	ldi	r25, 0x07	; 7
 72a:	01 97       	sbiw	r24, 0x01	; 1
 72c:	f1 f7       	brne	.-4      	; 0x72a <SERVO_0_Degree+0xe>
 72e:	00 c0       	rjmp	.+0      	; 0x730 <SERVO_0_Degree+0x14>
 730:	00 00       	nop
		_delay_us(1000);
		DIO_SetPinValue(DIO_GROUPC,DIO_PIN0,LOW);
 732:	40 e0       	ldi	r20, 0x00	; 0
 734:	60 e0       	ldi	r22, 0x00	; 0
 736:	82 e0       	ldi	r24, 0x02	; 2
 738:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 73c:	08 95       	ret

0000073e <SERVO_90_Degree>:
}

void SERVO_90_Degree(void)
{
		DIO_SetPinValue(DIO_GROUPC,DIO_PIN0,HIGH);
 73e:	41 e0       	ldi	r20, 0x01	; 1
 740:	60 e0       	ldi	r22, 0x00	; 0
 742:	82 e0       	ldi	r24, 0x02	; 2
 744:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 748:	87 eb       	ldi	r24, 0xB7	; 183
 74a:	9b e0       	ldi	r25, 0x0B	; 11
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	f1 f7       	brne	.-4      	; 0x74c <SERVO_90_Degree+0xe>
 750:	00 c0       	rjmp	.+0      	; 0x752 <SERVO_90_Degree+0x14>
 752:	00 00       	nop
		_delay_us(1500);
		DIO_SetPinValue(DIO_GROUPC,DIO_PIN0,LOW);
 754:	40 e0       	ldi	r20, 0x00	; 0
 756:	60 e0       	ldi	r22, 0x00	; 0
 758:	82 e0       	ldi	r24, 0x02	; 2
 75a:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 75e:	08 95       	ret

00000760 <SERVO_180_Degree>:
}
void SERVO_180_Degree(void)
{
	
		DIO_SetPinValue(DIO_GROUPC,DIO_PIN0,HIGH);
 760:	41 e0       	ldi	r20, 0x01	; 1
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	82 e0       	ldi	r24, 0x02	; 2
 766:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 76a:	8f e9       	ldi	r24, 0x9F	; 159
 76c:	9f e0       	ldi	r25, 0x0F	; 15
 76e:	01 97       	sbiw	r24, 0x01	; 1
 770:	f1 f7       	brne	.-4      	; 0x76e <SERVO_180_Degree+0xe>
 772:	00 c0       	rjmp	.+0      	; 0x774 <SERVO_180_Degree+0x14>
 774:	00 00       	nop
		_delay_us(2000);
		DIO_SetPinValue(DIO_GROUPC,DIO_PIN0,LOW);
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	60 e0       	ldi	r22, 0x00	; 0
 77a:	82 e0       	ldi	r24, 0x02	; 2
 77c:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 780:	08 95       	ret

00000782 <ULTRASONIC_CalcDistance>:
#define  F_CPU 1000000UL
#include <util/delay.h>
u16 ULTRASONIC_CalcDistance()
{
u16 a,b,high,distance;
	TCCR1A = 0;
 782:	1f bc       	out	0x2f, r1	; 47
	TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag)  */
 784:	80 e2       	ldi	r24, 0x20	; 32
 786:	88 bf       	out	0x38, r24	; 56
	DIO_SetPinValue(DIO_GROUPD,DIO_PIN7,HIGH);
 788:	41 e0       	ldi	r20, 0x01	; 1
 78a:	67 e0       	ldi	r22, 0x07	; 7
 78c:	83 e0       	ldi	r24, 0x03	; 3
 78e:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
 792:	80 e1       	ldi	r24, 0x10	; 16
 794:	8a 95       	dec	r24
 796:	f1 f7       	brne	.-4      	; 0x794 <ULTRASONIC_CalcDistance+0x12>
 798:	00 c0       	rjmp	.+0      	; 0x79a <ULTRASONIC_CalcDistance+0x18>
	_delay_us(50);
	DIO_SetPinValue(DIO_GROUPD,DIO_PIN7,LOW);
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	67 e0       	ldi	r22, 0x07	; 7
 79e:	83 e0       	ldi	r24, 0x03	; 3
 7a0:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_SetPinValue>
	TCCR1B = 0xc1;  	/* Rising edge, no prescaler , noise canceler*/
 7a4:	81 ec       	ldi	r24, 0xC1	; 193
 7a6:	8e bd       	out	0x2e, r24	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 7a8:	08 b6       	in	r0, 0x38	; 56
 7aa:	05 fe       	sbrs	r0, 5
 7ac:	fd cf       	rjmp	.-6      	; 0x7a8 <ULTRASONIC_CalcDistance+0x26>
	a = ICR1;  		/* Take value of capture register */
 7ae:	86 b5       	in	r24, 0x26	; 38
 7b0:	97 b5       	in	r25, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 7b2:	20 e2       	ldi	r18, 0x20	; 32
 7b4:	28 bf       	out	0x38, r18	; 56
	TCCR1B = 0x81;  	/* Falling edge, no prescaler ,noise canceler*/
 7b6:	21 e8       	ldi	r18, 0x81	; 129
 7b8:	2e bd       	out	0x2e, r18	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 7ba:	08 b6       	in	r0, 0x38	; 56
 7bc:	05 fe       	sbrs	r0, 5
 7be:	fd cf       	rjmp	.-6      	; 0x7ba <ULTRASONIC_CalcDistance+0x38>
	b = ICR1;  		/* Take value of capture register */
 7c0:	26 b5       	in	r18, 0x26	; 38
 7c2:	37 b5       	in	r19, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 7c4:	40 e2       	ldi	r20, 0x20	; 32
 7c6:	48 bf       	out	0x38, r20	; 56
	TCNT1=0;
 7c8:	1d bc       	out	0x2d, r1	; 45
 7ca:	1c bc       	out	0x2c, r1	; 44
	TCCR1B = 0;  		/* Stop the timer */
 7cc:	1e bc       	out	0x2e, r1	; 46
	high=b-a;
 7ce:	28 1b       	sub	r18, r24
 7d0:	39 0b       	sbc	r19, r25
	distance=((high*34600)/(F_CPU*2)) ;
 7d2:	a8 e2       	ldi	r26, 0x28	; 40
 7d4:	b7 e8       	ldi	r27, 0x87	; 135
 7d6:	0e 94 17 04 	call	0x82e	; 0x82e <__umulhisi3>
 7da:	20 e8       	ldi	r18, 0x80	; 128
 7dc:	34 e8       	ldi	r19, 0x84	; 132
 7de:	4e e1       	ldi	r20, 0x1E	; 30
 7e0:	50 e0       	ldi	r21, 0x00	; 0
 7e2:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__udivmodsi4>
	return distance;
 7e6:	c9 01       	movw	r24, r18
 7e8:	08 95       	ret

000007ea <__udivmodsi4>:
 7ea:	a1 e2       	ldi	r26, 0x21	; 33
 7ec:	1a 2e       	mov	r1, r26
 7ee:	aa 1b       	sub	r26, r26
 7f0:	bb 1b       	sub	r27, r27
 7f2:	fd 01       	movw	r30, r26
 7f4:	0d c0       	rjmp	.+26     	; 0x810 <__udivmodsi4_ep>

000007f6 <__udivmodsi4_loop>:
 7f6:	aa 1f       	adc	r26, r26
 7f8:	bb 1f       	adc	r27, r27
 7fa:	ee 1f       	adc	r30, r30
 7fc:	ff 1f       	adc	r31, r31
 7fe:	a2 17       	cp	r26, r18
 800:	b3 07       	cpc	r27, r19
 802:	e4 07       	cpc	r30, r20
 804:	f5 07       	cpc	r31, r21
 806:	20 f0       	brcs	.+8      	; 0x810 <__udivmodsi4_ep>
 808:	a2 1b       	sub	r26, r18
 80a:	b3 0b       	sbc	r27, r19
 80c:	e4 0b       	sbc	r30, r20
 80e:	f5 0b       	sbc	r31, r21

00000810 <__udivmodsi4_ep>:
 810:	66 1f       	adc	r22, r22
 812:	77 1f       	adc	r23, r23
 814:	88 1f       	adc	r24, r24
 816:	99 1f       	adc	r25, r25
 818:	1a 94       	dec	r1
 81a:	69 f7       	brne	.-38     	; 0x7f6 <__udivmodsi4_loop>
 81c:	60 95       	com	r22
 81e:	70 95       	com	r23
 820:	80 95       	com	r24
 822:	90 95       	com	r25
 824:	9b 01       	movw	r18, r22
 826:	ac 01       	movw	r20, r24
 828:	bd 01       	movw	r22, r26
 82a:	cf 01       	movw	r24, r30
 82c:	08 95       	ret

0000082e <__umulhisi3>:
 82e:	a2 9f       	mul	r26, r18
 830:	b0 01       	movw	r22, r0
 832:	b3 9f       	mul	r27, r19
 834:	c0 01       	movw	r24, r0
 836:	a3 9f       	mul	r26, r19
 838:	70 0d       	add	r23, r0
 83a:	81 1d       	adc	r24, r1
 83c:	11 24       	eor	r1, r1
 83e:	91 1d       	adc	r25, r1
 840:	b2 9f       	mul	r27, r18
 842:	70 0d       	add	r23, r0
 844:	81 1d       	adc	r24, r1
 846:	11 24       	eor	r1, r1
 848:	91 1d       	adc	r25, r1
 84a:	08 95       	ret

0000084c <_exit>:
 84c:	f8 94       	cli

0000084e <__stop_program>:
 84e:	ff cf       	rjmp	.-2      	; 0x84e <__stop_program>
